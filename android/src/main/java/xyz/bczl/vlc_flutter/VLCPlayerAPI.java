// Autogenerated from Pigeon (v0.1.23), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package xyz.bczl.vlc_flutter;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class VLCPlayerAPI {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TextureParam {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static TextureParam fromMap(Map<String, Object> map) {
      TextureParam fromMapResult = new TextureParam();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VLCPlayerOptions {
    private List<Object> args;
    public List<Object> getArgs() { return args; }
    public void setArgs(List<Object> setterArg) { this.args = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("args", args);
      return toMapResult;
    }
    static VLCPlayerOptions fromMap(Map<String, Object> map) {
      VLCPlayerOptions fromMapResult = new VLCPlayerOptions();
      Object args = map.get("args");
      fromMapResult.args = (List<Object>)args;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BufferSize {
    private Long width;
    public Long getWidth() { return width; }
    public void setWidth(Long setterArg) { this.width = setterArg; }

    private Long height;
    public Long getHeight() { return height; }
    public void setHeight(Long setterArg) { this.height = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("width", width);
      toMapResult.put("height", height);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static BufferSize fromMap(Map<String, Object> map) {
      BufferSize fromMapResult = new BufferSize();
      Object width = map.get("width");
      fromMapResult.width = (width == null) ? null : ((width instanceof Integer) ? (Integer)width : (Long)width);
      Object height = map.get("height");
      fromMapResult.height = (height == null) ? null : ((height instanceof Integer) ? (Integer)height : (Long)height);
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PlayParam {
    private String uri;
    public String getUri() { return uri; }
    public void setUri(String setterArg) { this.uri = setterArg; }

    private String path;
    public String getPath() { return path; }
    public void setPath(String setterArg) { this.path = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uri", uri);
      toMapResult.put("path", path);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static PlayParam fromMap(Map<String, Object> map) {
      PlayParam fromMapResult = new PlayParam();
      Object uri = map.get("uri");
      fromMapResult.uri = (String)uri;
      Object path = map.get("path");
      fromMapResult.path = (String)path;
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IntParam {
    private Long value;
    public Long getValue() { return value; }
    public void setValue(Long setterArg) { this.value = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static IntParam fromMap(Map<String, Object> map) {
      IntParam fromMapResult = new IntParam();
      Object value = map.get("value");
      fromMapResult.value = (value == null) ? null : ((value instanceof Integer) ? (Integer)value : (Long)value);
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DoubleParam {
    private Double value;
    public Double getValue() { return value; }
    public void setValue(Double setterArg) { this.value = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static DoubleParam fromMap(Map<String, Object> map) {
      DoubleParam fromMapResult = new DoubleParam();
      Object value = map.get("value");
      fromMapResult.value = (Double)value;
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StringParam {
    private String value;
    public String getValue() { return value; }
    public void setValue(String setterArg) { this.value = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static StringParam fromMap(Map<String, Object> map) {
      StringParam fromMapResult = new StringParam();
      Object value = map.get("value");
      fromMapResult.value = (String)value;
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BoolParam {
    private Boolean value;
    public Boolean getValue() { return value; }
    public void setValue(Boolean setterArg) { this.value = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static BoolParam fromMap(Map<String, Object> map) {
      BoolParam fromMapResult = new BoolParam();
      Object value = map.get("value");
      fromMapResult.value = (Boolean)value;
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SlaveParam {
    private Long type;
    public Long getType() { return type; }
    public void setType(Long setterArg) { this.type = setterArg; }

    private String uri;
    public String getUri() { return uri; }
    public void setUri(String setterArg) { this.uri = setterArg; }

    private String path;
    public String getPath() { return path; }
    public void setPath(String setterArg) { this.path = setterArg; }

    private Boolean select;
    public Boolean getSelect() { return select; }
    public void setSelect(Boolean setterArg) { this.select = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type);
      toMapResult.put("uri", uri);
      toMapResult.put("path", path);
      toMapResult.put("select", select);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static SlaveParam fromMap(Map<String, Object> map) {
      SlaveParam fromMapResult = new SlaveParam();
      Object type = map.get("type");
      fromMapResult.type = (type == null) ? null : ((type instanceof Integer) ? (Integer)type : (Long)type);
      Object uri = map.get("uri");
      fromMapResult.uri = (String)uri;
      Object path = map.get("path");
      fromMapResult.path = (String)path;
      Object select = map.get("select");
      fromMapResult.select = (Boolean)select;
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TitleDisplayParam {
    private Long position;
    public Long getPosition() { return position; }
    public void setPosition(Long setterArg) { this.position = setterArg; }

    private Long timeout;
    public Long getTimeout() { return timeout; }
    public void setTimeout(Long setterArg) { this.timeout = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("position", position);
      toMapResult.put("timeout", timeout);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static TitleDisplayParam fromMap(Map<String, Object> map) {
      TitleDisplayParam fromMapResult = new TitleDisplayParam();
      Object position = map.get("position");
      fromMapResult.position = (position == null) ? null : ((position instanceof Integer) ? (Integer)position : (Long)position);
      Object timeout = map.get("timeout");
      fromMapResult.timeout = (timeout == null) ? null : ((timeout instanceof Integer) ? (Integer)timeout : (Long)timeout);
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface VLCPlayerApi {
    TextureParam create(VLCPlayerOptions arg);
    void dispose(TextureParam arg);
    void release();
    void setDefaultBufferSize(BufferSize arg);
    void setDataSource(PlayParam arg);
    void setVideoScale(IntParam arg);
    IntParam getVideoScale(TextureParam arg);
    void play(PlayParam arg);
    void stop(TextureParam arg);
    DoubleParam getScale(TextureParam arg);
    void setScale(DoubleParam arg);
    StringParam getAspectRatio(TextureParam arg);
    void setAspectRatio(StringParam arg);
    void setRate(DoubleParam arg);
    DoubleParam getRate(TextureParam arg);
    BoolParam isPlaying(TextureParam arg);
    BoolParam isSeekable(TextureParam arg);
    void pause(TextureParam arg);
    IntParam getPlayerState(TextureParam arg);
    IntParam getVolume(TextureParam arg);
    IntParam setVolume(IntParam arg);
    IntParam getTime(TextureParam arg);
    IntParam setTime(IntParam arg);
    DoubleParam getPosition(TextureParam arg);
    void setPosition(DoubleParam arg);
    IntParam getLength(TextureParam arg);
    BoolParam addSlave(SlaveParam arg);
    void setVideoTitleDisplay(TitleDisplayParam arg);
    BoolParam record(StringParam arg);

    /** Sets up an instance of `VLCPlayerApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, VLCPlayerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.create", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              VLCPlayerOptions input = VLCPlayerOptions.fromMap((Map<String, Object>)message);
              TextureParam output = api.create(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.dispose", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              api.dispose(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.release", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.release();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setDefaultBufferSize", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BufferSize input = BufferSize.fromMap((Map<String, Object>)message);
              api.setDefaultBufferSize(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setDataSource", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PlayParam input = PlayParam.fromMap((Map<String, Object>)message);
              api.setDataSource(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setVideoScale", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntParam input = IntParam.fromMap((Map<String, Object>)message);
              api.setVideoScale(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.getVideoScale", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              IntParam output = api.getVideoScale(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.play", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PlayParam input = PlayParam.fromMap((Map<String, Object>)message);
              api.play(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.stop", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              api.stop(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.getScale", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              DoubleParam output = api.getScale(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setScale", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              DoubleParam input = DoubleParam.fromMap((Map<String, Object>)message);
              api.setScale(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.getAspectRatio", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              StringParam output = api.getAspectRatio(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setAspectRatio", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringParam input = StringParam.fromMap((Map<String, Object>)message);
              api.setAspectRatio(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setRate", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              DoubleParam input = DoubleParam.fromMap((Map<String, Object>)message);
              api.setRate(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.getRate", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              DoubleParam output = api.getRate(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.isPlaying", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              BoolParam output = api.isPlaying(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.isSeekable", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              BoolParam output = api.isSeekable(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.pause", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              api.pause(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.getPlayerState", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              IntParam output = api.getPlayerState(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.getVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              IntParam output = api.getVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntParam input = IntParam.fromMap((Map<String, Object>)message);
              IntParam output = api.setVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.getTime", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              IntParam output = api.getTime(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setTime", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntParam input = IntParam.fromMap((Map<String, Object>)message);
              IntParam output = api.setTime(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.getPosition", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              DoubleParam output = api.getPosition(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setPosition", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              DoubleParam input = DoubleParam.fromMap((Map<String, Object>)message);
              api.setPosition(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.getLength", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureParam input = TextureParam.fromMap((Map<String, Object>)message);
              IntParam output = api.getLength(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.addSlave", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SlaveParam input = SlaveParam.fromMap((Map<String, Object>)message);
              BoolParam output = api.addSlave(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.setVideoTitleDisplay", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TitleDisplayParam input = TitleDisplayParam.fromMap((Map<String, Object>)message);
              api.setVideoTitleDisplay(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VLCPlayerApi.record", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringParam input = StringParam.fromMap((Map<String, Object>)message);
              BoolParam output = api.record(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
